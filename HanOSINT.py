import json
import re
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
API_KEYS = {
    "numverify": "YOUR_NUMVERIFY_API_KEY",  # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ numverify.com
    "abstractapi": "YOUR_ABSTRACTAPI_KEY"   # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ abstractapi.com
}

class OSINTBot:
    def __init__(self):
        self.user_data = {}
        self.services = {
            "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": self.get_phone_info,
            "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏": self.social_media_search,
            "–£—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö": self.breach_check,
            "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è": self.geolocation_data
        }

    async def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await update.message.reply_text(
            f"üîç –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø OSINT-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789)"
        )

    async def handle_phone(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        phone = update.message.text.strip()
        if not self.validate_phone(phone):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: +79123456789")
            return
        
        self.user_data[update.effective_user.id] = phone
        await self.show_services_menu(update, context, phone)

    def validate_phone(self, phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞"""
        pattern = r"^\+\d{11,15}$"
        return re.match(pattern, phone) is not None

    async def show_services_menu(self, update: Update, context: CallbackContext, phone: str) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        keyboard = [
            [InlineKeyboardButton(service, callback_data=f"service_{service}")]
            for service in self.services
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üì± –ù–æ–º–µ—Ä: {phone}\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=reply_markup
        )

    async def service_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        service_name = query.data.split('_')[1]
        user_id = query.from_user.id
        phone = self.user_data.get(user_id)
        
        if not phone:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞.")
            return
        
        if service_name in self.services:
            await query.edit_message_text(f"‚åõ –ò—â—É –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ {service_name}...")
            result = await self.services[service_name](phone)
            await query.edit_message_text(result)

    async def get_phone_info(self, phone: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ"""
        url = f"http://apilayer.net/api/validate?access_key={API_KEYS['numverify']}&number={phone}"
        try:
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if not data.get("valid"):
                return "‚ùå –ù–æ–º–µ—Ä –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            return (
                "üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {data.get('country_name')}\n"
                f"‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: {data.get('carrier')}\n"
                f"‚Ä¢ –¢–∏–ø –ª–∏–Ω–∏–∏: {data.get('line_type')}\n"
                f"‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {data.get('location')}\n"
                f"‚Ä¢ –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {data.get('country_code')}\n"
                f"‚Ä¢ –†–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä: {'–î–∞' if data.get('valid') else '–ù–µ—Ç'}"
            )
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

    async def social_media_search(self, phone: str) -> str:
        """–ü–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç API –≤—ã–∑–æ–≤—ã –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
        formatted_phone = phone.replace("+", "")
        return (
            "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:\n"
            "‚Ä¢ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/phone/{formatted_phone}\n"
            "‚Ä¢ Telegram: https://t.me/{formatted_phone}\n"
            "‚Ä¢ WhatsApp: https://wa.me/{formatted_phone}\n\n"
            "‚ÑπÔ∏è –≠—Ç–æ –ø—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫. –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è."
        )

    async def breach_check(self, phone: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API AbstractAPI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–µ–∫
        url = f"https://phonevalidation.abstractapi.com/v1/?api_key={API_KEYS['abstractapi']}&phone={phone}"
        try:
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if data.get("security"):
                breaches = data["security"].get("breaches", [])
                if breaches:
                    return f"‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ {len(breaches)} —É—Ç–µ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö!"
                return "‚úÖ –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö"
            return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Ç–µ—á–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Ç–µ—á–µ–∫: {str(e)}"

    async def geolocation_data(self, phone: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API OpenCelliD (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        url = f"https://opencellid.org/cell/get?key=YOUR_KEY&mcc=250&mnc=01&lac=1234&cellid=56789"  # –ü—Ä–∏–º–µ—Ä
        return (
            "üìç –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:\n"
            "‚Ä¢ –ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞\n"
            "‚Ä¢ –†–µ–≥–∏–æ–Ω: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥\n"
            "‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 55.7558¬∞ N, 37.6173¬∞ E\n\n"
            "‚ÑπÔ∏è –¢–æ—á–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ–∫ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏"
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = OSINTBot()
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_phone))
    app.add_handler(CallbackQueryHandler(bot.service_handler, pattern=r"^service_"))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == "__main__":
    main()
